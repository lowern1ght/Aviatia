version: '3.4'

services:
#ApiGateway
  apigateway:
    image: aviatia/apigateway
    build:
      context: .
      dockerfile: ./src/services/ApiGateway/Dockerfile
    ports:
      - 12000:80
      - 12001:443
#Render
  clientapp:
    image: aviatia/render
    build: 
      context: src/client-app/
      dockerfile: ./Dockerfile
    environment:
      - NODE_ENV=production
    ports:
      - 4000:80
#Services
  locationservice:
    image: locationservice
    restart: always
    build:
      context: .
      dockerfile: src/services/LocationService/Dockerfile
    depends_on:
      - dblocation
    ports:
      - 7001:80
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
  authorizationservice:
    build:
      context: .
      dockerfile: src/services/AuthorizationService/Dockerfile
    ports:
      - 7002:80
    depends_on:
      - dbauthorization
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
#InternalApp
  dblocation:
    image: postgres:latest
    ports:
      - 5001:5432
    restart: always
    environment:
      - POSTGRES_DB=locationdb
      - POSTGRES_USER=location_admin
      - POSTGRES_PASSWORD=jnxtnysq
    volumes:
      - locationdb-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U location_admin -d locationdb"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
  dbauthorization:
    image: postgres:latest
    ports:
      - 5002:5432
    restart: always
    environment:
      - POSTGRES_DB=authdb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=,frfkjdf
    volumes:
      - authorization:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d authdb"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
volumes:
  locationdb-data:
  authorization-data: